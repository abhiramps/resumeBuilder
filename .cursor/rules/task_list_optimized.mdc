---
alwaysApply: true
---
### Task 2: TypeScript Type Definitions

```
Create comprehensive TypeScript type definitions for the entire application.

Create file: src/types/resume.types.ts

Requirements:
Define interfaces for:
- Resume (main data structure)
- PersonalInfo (name, contact details, social links)
- Section (id, type, title, enabled, order, content)
- SectionType (enum: summary, experience, projects, skills, education, certifications, custom)
- ExperienceItem (job title, company, dates, responsibilities array)
- ProjectItem (name, tech stack, dates, descriptions array)
- SkillCategory (category name, skills array)
- EducationItem (degree, university, dates, coursework)
- CertificationItem (name, issuer, dates)
- LayoutSettings (margins, spacing, line height, font sizes, font family, colors)
- TemplateType (enum: classic, modern, minimal, abhiram)
- TemplateConfig (id, name, thumbnail, ATS score, customizable options)

Create file: src/types/actions.types.ts
- Define all action types for the reducer
- Union type for all actions
- Action creator types

Deliverables:
- Complete resume.types.ts
- Complete actions.types.ts
- All interfaces properly exported
- JSDoc comments for complex types
```

**Subtasks:**

- 2.1: Define core data structure types (Resume, PersonalInfo, Section)
- 2.2: Define content-specific types (Experience, Projects, Skills, Education)
- 2.3: Define layout and styling types
- 2.4: Define action types for state management

---

### Task 3: Default Resume Data and Constants

```
Create default resume data and application constants.

Create file: src/constants/defaultResume.ts

Requirements:
- Export DEFAULT_RESUME object with all fields populated with placeholder data
- Include sample data for each section type
- Use realistic software engineer resume content
- Follow ATS best practices in default data

Create file: src/constants/atsGuidelines.ts
- Export ATS_SAFE_FONTS array
- Export ATS_RULES object with validation rules
- Export SECTION_HEADERS object with standard naming
- Export DEFAULT_LAYOUT_SETTINGS

Create file: src/constants/templateConfigs.ts
- Export configurations for all 4 templates (Classic, Modern, Minimal, Abhiram)
- Include default layout settings per template
- Define customization capabilities per template

Deliverables:
- Fully populated default resume
- Complete ATS guidelines
- All template configurations
- Properly typed with interfaces
```

**Subtasks:**

- 3.1: Create defaultResume.ts with comprehensive sample data
- 3.2: Create atsGuidelines.ts with validation rules
- 3.3: Create templateConfigs.ts with template definitions

---

### Task 4: Resume Context and State Management

```
Create the global state management system using Context API and useReducer.

Create file: src/contexts/ResumeContext.tsx

Requirements:
- Create ResumeContext with TypeScript interfaces
- Implement useReducer with all action handlers:
  - UPDATE_PERSONAL_INFO
  - ADD_SECTION
  - UPDATE_SECTION
  - DELETE_SECTION
  - REORDER_SECTIONS
  - TOGGLE_SECTION
  - UPDATE_LAYOUT
  - CHANGE_TEMPLATE
  - IMPORT_RESUME
  - RESET_RESUME
- Create ResumeProvider component
- Export useResumeContext hook with type safety
- Initialize with DEFAULT_RESUME
- Implement proper immutable updates

Deliverables:
- Working ResumeContext
- Fully typed reducer
- useResumeContext custom hook
- All CRUD operations for sections
```

**Subtasks:**

- 4.1: Set up basic context structure and types
- 4.2: Implement reducer with all action handlers
- 4.3: Create provider component and custom hook
- 4.4: Test state updates work correctly

---

### Task 5: Basic UI Components Library

```
Create reusable UI components used throughout the application.

Create components in src/components/UI/:

1. Input.tsx
   - Text input with label
   - Support for different input types
   - Error state styling
   - Optional icon

2. Button.tsx
   - Primary, secondary, ghost variants
   - Different sizes (sm, md, lg)
   - Loading state
   - Icon support

3. Select.tsx
   - Dropdown select with label
   - Custom styling
   - Proper keyboard navigation

4. RangeSlider.tsx
   - Labeled range input
   - Display current value
   - Min, max, step props
   - Unit display (px, ", etc.)

5. ColorPicker.tsx
   - Color input with preview
   - Hex value display
   - Label support

6. Textarea.tsx
   - Multi-line text input
   - Auto-resize option
   - Character count

Requirements:
- All components fully typed with TypeScript
- Consistent styling with Tailwind
- Accessible (ARIA labels, keyboard navigation)
- Controlled components pattern
- Props interfaces exported

Deliverables:
- 6 working UI components
- Consistent styling and behavior
- Full TypeScript support
- Storybook-ready structure
```

**Subtasks:**

- 5.1: Create Input and Textarea components
- 5.2: Create Button and Select components
- 5.3: Create RangeSlider and ColorPicker components
- 5.4: Test all components render and handle events correctly

---

### Task 6: Main Layout Structure

```
Create the main application layout with three-panel design.

Create file: src/components/Layout/EditorLayout.tsx

Requirements:
- Three-column layout:
  - Left sidebar (300px fixed) - Section editors
  - Center preview (flexible, max 850px) - Resume preview
  - Right sidebar (250px fixed) - Layout controls
- Responsive design (stack on mobile)
- Scrollable sidebar areas
- Fixed header and footer
- Proper spacing and borders

Create file: src/components/Layout/Header.tsx
- Logo/title
- Template selector dropdown
- Save button
- Export PDF button
- Proper styling

Create file: src/components/Layout/Footer.tsx
- ATS score display
- Warning indicators
- Help/tips button

Requirements:
- Use Tailwind for layout
- Implement sticky header
- Handle overflow properly
- Mobile-responsive breakpoints

Deliverables:
- Complete three-panel layout
- Working header with buttons
- Footer with score display
- Responsive behavior
```

**Subtasks:**

- 6.1: Create EditorLayout with three-panel grid
- 6.2: Create Header component with navigation
- 6.3: Create Footer component with ATS score
- 6.4: Add responsive design for mobile

---

### Task 7: Auto-Save Hook

```
Implement auto-save functionality using LocalStorage.

Create file: src/hooks/useAutoSave.ts

Requirements:
- Save resume data to LocalStorage every 30 seconds
- Debounce saves to avoid excessive writes
- Save on window beforeunload event
- Restore data on app mount
- Handle errors gracefully
- Show save status indicator

Create file: src/utils/storageManager.ts
- saveToLocalStorage(key, data) function
- loadFromLocalStorage(key) function
- clearLocalStorage(key) function
- Error handling and type safety

Requirements:
- Use localforage for better API
- Implement try-catch for quota exceeded
- Return save success/failure status

Deliverables:
- Working useAutoSave hook
- Storage utility functions
- Data persistence across page reloads
- Error handling for storage failures
```

**Subtasks:**

- 7.1: Create storageManager utility with save/load functions
- 7.2: Implement useAutoSave hook with debouncing
- 7.3: Add beforeunload event handler
- 7.4: Test auto-save and restore functionality

---

### Task 8: Personal Info Editor Component

```
Create the Personal Information section editor.

Create file: src/components/Editor/PersonalInfoEditor.tsx

Requirements:
- Form inputs for:
  - Full Name (required)
  - Professional Title (required)
  - Email (required, validated)
  - Phone (validated format)
  - Location (city, state, country)
  - LinkedIn URL (optional)
  - GitHub URL (optional)
  - Portfolio URL (optional)
  - Custom links array (add/remove)
- Real-time validation
- Update context on change
- Collapsible section with icon
- Clear visual hierarchy

Styling:
- Use UI components from Task 5
- Proper spacing and labels
- Error messages for validation
- Responsive form layout

Deliverables:
- Fully functional personal info editor
- Form validation working
- Updates reflected in preview immediately
- Custom links add/remove functionality
```

**Subtasks:**

- 8.1: Create basic form structure with required fields
- 8.2: Add validation for email, phone, URLs
- 8.3: Implement custom links functionality
- 8.4: Connect to context and test updates

---

### Task 9: Basic Resume Preview Component

```
Create the resume preview component that displays formatted resume.

Create file: src/components/Preview/ResumePreview.tsx

Requirements:
- Display all resume sections in formatted layout
- Use forwardRef for PDF generation
- Apply user's layout settings (margins, spacing, fonts)
- Render only enabled sections
- Display sections in correct order
- Letter size (8.5" x 11") dimensions
- Scrollable preview area
- Print-specific CSS via @media print

Create file: src/components/Preview/PreviewContainer.tsx
- Wrapper component with scaling
- Center preview in container
- Add paper shadow effect
- Zoom controls

Styling:
- Clean, professional design
- ATS-safe formatting
- Proper hierarchy
- Print-optimized

Deliverables:
- Working preview component
- Displays personal info correctly
- Proper print styling
- Responsive to layout changes
```

**Subtasks:**

- 9.1: Create basic preview structure with ref
- 9.2: Implement personal info rendering
- 9.3: Add print-specific CSS
- 9.4: Create container with paper effect

---

### Task 10: Template Base Structure

```
Create the base template system and structure.

Create file: src/components/Templates/TemplateBase.tsx

Requirements:
- Abstract base component for all templates
- Props interface:
  - resume: Resume data
  - layout: LayoutSettings
  - ref: ForwardedRef for PDF
- Common utility functions:
  - formatDate(date: string)
  - formatPhoneNumber(phone: string)
  - renderBulletPoints(items: string[])
- Shared styling utilities

Create file: src/hooks/useTemplate.ts
- Hook for template switching
- Load template configuration
- Apply template defaults
- Handle template change

Create file: src/utils/templateHelpers.ts
- Helper functions shared across templates
- Date formatting
- URL formatting
- Text truncation

Deliverables:
- Template base component
- useTemplate hook working
- Template helper utilities
- Foundation for building specific templates
```

**Subtasks:**

- 10.1: Create TemplateBase component with common structure
- 10.2: Implement useTemplate hook
- 10.3: Create template helper utilities
- 10.4: Test template switching logic

---

## PHASE 2: EDITOR CORE (Tasks 11-20)

### Task 11: Professional Summary Editor

```
Create the professional summary section editor.

Create file: src/components/Editor/SummaryEditor.tsx

Requirements:
- Large textarea for summary text (3-5 sentences)
- Character count display (recommend 150-300 chars)
- ATS keyword suggestions
- Real-time preview update
- Collapsible section
- Tips sidebar for writing effective summaries

Features:
- Auto-save on change (debounced)
- Format validation (no special characters)
- Word count display
- Sample summary examples

Deliverables:
- Working summary editor
- Character/word counter
- Connected to context
- Updates preview in real-time
```

---

### Task 12: Work Experience Editor

```
Create the work experience section editor with multiple entries.

Create file: src/components/Editor/ExperienceEditor.tsx

Requirements:
- Add/remove experience entries
- Reorder entries via drag-and-drop
- For each entry:
  - Job Title (required)
  - Company Name (required)
  - Location (city, state)
  - Start Date (month/year)
  - End Date or "Present" checkbox
  - Responsibilities (bullet points)
- Add/remove bullet points
- Duplicate entry functionality
- Collapse/expand entries

Styling:
- Clear visual separation between entries
- Drag handle for reordering
- Delete confirmation
- Responsive layout

Deliverables:
- Full CRUD operations for experience entries
- Drag-and-drop reordering working
- Bullet point management
- Connected to context
```

**Subtasks:**

- 12.1: Create experience entry form component
- 12.2: Implement add/remove entry functionality
- 12.3: Add drag-and-drop reordering
- 12.4: Create bullet point manager

---

### Task 13: Projects Section Editor

```
Create the projects section editor.

Create file: src/components/Editor/ProjectsEditor.tsx

Requirements:
- Add/remove project entries
- Reorder projects via drag-and-drop
- For each project:
  - Project Name (required)
  - Tech Stack (comma-separated or tags)
  - Start Date (optional)
  - End Date (optional)
  - Project URL/GitHub (optional)
  - Description bullet points
- Tech stack tag input with suggestions
- Add/remove description points
- Collapse/expand entries

Features:
- Common tech stack suggestions
- Validate URLs
- Import from GitHub (future enhancement)
- Sample project templates

Deliverables:
- Working projects editor
- Tag input for tech stack
- Drag-and-drop reordering
- Connected to context
```

**Subtasks:**

- 13.1: Create project entry form
- 13.2: Implement tech stack tag input
- 13.3: Add reordering functionality
- 13.4: Create description manager

---

### Task 14: Technical Skills Editor

```
Create the technical skills section editor with categories.

Create file: src/components/Editor/SkillsEditor.tsx

Requirements:
- Multiple skill categories:
  - Languages
  - Databases
  - Backend Technologies
  - Frontend Technologies
  - Cloud & DevOps
  - Tools
  - Custom categories
- Add/remove categories
- Add/remove skills within categories
- Reorder categories
- Skill level indicators (optional)
- Tag-based input

Features:
- Preset skill suggestions
- Popular skills autocomplete
- Bulk add skills (comma-separated)
- Category templates

Styling:
- Clear category separation
- Tag-style skill display
- Easy add/remove interface

Deliverables:
- Working skills editor
- Category management
- Tag input for skills
- Preset suggestions
```

**Subtasks:**

- 14.1: Create skill category manager
- 14.2: Implement tag input with autocomplete
- 14.3: Add preset skill suggestions
- 14.4: Create category templates

---

### Task 15: Education Section Editor

```
Create the education section editor.

Create file: src/components/Editor/EducationEditor.tsx

Requirements:
- Add/remove education entries
- For each entry:
  - Degree/Certification (required)
  - Field of Study
  - University/Institution (required)
  - Location
  - Start Date
  - End Date or "Expected" date
  - GPA (optional)
  - Relevant Coursework (comma-separated)
  - Honors/Awards (optional)
- Reorder entries
- Collapse/expand entries

Features:
- Common degree suggestions
- University autocomplete (future)
- Coursework tag input
- GPA validation

Deliverables:
- Working education editor
- Multiple entry support
- Coursework management
- Connected to context
```

---

### Task 16: Certifications Section Editor

```
Create the certifications section editor.

Create file: src/components/Editor/CertificationsEditor.tsx

Requirements:
- Add/remove certification entries
- For each entry:
  - Certification Name (required)
  - Issuing Organization (required)
  - Issue Date (month/year)
  - Expiration Date (optional)
  - Credential ID (optional)
  - Credential URL (optional)
- Reorder entries
- Mark as "Does not expire"
- Validate URLs

Features:
- Common certification suggestions
- Expiration warnings
- Link validation
- Icon/logo support (optional)

Deliverables:
- Working certifications editor
- Entry management
- Date validation
- URL validation
```

---

### Task 17: Section Manager Component

```
Create the section manager for enabling/disabling and reordering sections.

Create file: src/components/Editor/SectionManager.tsx

Requirements:
- Display all available sections
- Toggle sections on/off
- Drag-and-drop to reorder sections
- Visual indicators for enabled/disabled state
- Add custom section button
- Section visibility in preview updates immediately

Features:
- Smooth animations for reordering
- Confirmation for section deletion
- Section templates for custom sections
- Preview how section order looks

Styling:
- Clear visual hierarchy
- Drag handle prominent
- Toggle switches intuitive
- Compact list view

Deliverables:
- Working section toggle
- Drag-and-drop reordering
- Custom section support
- Updates preview immediately
```

**Subtasks:**

- 17.1: Create section list with toggles
- 17.2: Implement drag-and-drop reordering
- 17.3: Add custom section functionality
- 17.4: Connect to context and test

---

### Task 18: Layout Controls - Margins and Spacing

```
Create layout controls for adjusting page margins and spacing.

Create file: src/components/Layout/LayoutControls.tsx

Requirements:
- Page margin controls:
  - Top (0.1" - 2")
  - Right (0.1" - 2")
  - Bottom (0.1" - 2")
  - Left (0.1" - 2")
  - Link margins option (adjust all together)
- Section spacing control (5px - 30px)
- Line height control (1.0 - 2.0)
- Reset to defaults button
- Preview updates in real-time

UI Elements:
- Range sliders with value display
- Unit toggle (inches / mm)
- Visual feedback
- Preset buttons (Narrow, Normal, Wide)

Deliverables:
- Working margin controls
- Spacing controls
- Real-time preview updates
- Preset options
```

---

### Task 19: Typography Controls

```
Create typography controls for fonts and sizes.

Create file: src/components/Layout/TypographyControls.tsx (add to LayoutControls)

Requirements:
- Font family selector (ATS-safe fonts only):
  - Arial
  - Helvetica
  - Times New Roman
  - Georgia
  - Calibri
- Font size controls:
  - Name (18pt - 28pt)
  - Title (10pt - 16pt)
  - Section Headers (10pt - 14pt)
  - Body Text (9pt - 12pt)
- Font weight options
- Line height control
- Preview font changes in real-time

Features:
- Font preview
- Size presets (Small, Medium, Large)
- Reset to template defaults
- ATS compliance indicator

Deliverables:
- Working font selector
- Size controls for all levels
- Real-time preview
- ATS warnings for unsafe fonts
```

---

### Task 20: Color Customization Controls

```
Create color customization controls.

Create file: src/components/Layout/ColorControls.tsx (add to LayoutControls)

Requirements:
- Color pickers for:
  - Primary color (headers, borders)
  - Secondary color (dates, metadata)
  - Text color (body text)
- Color presets (Professional, Modern, Vibrant)
- Reset to template defaults
- Preview color changes in real-time
- ATS compliance warnings for poor contrast

Features:
- Hex color input
- Color swatches for presets
- Contrast checker (WCAG AA)
- Grayscale preview mode
- Save custom color schemes

Deliverables:
- Working color pickers
- Preset color schemes
- Contrast validation
- Real-time preview updates
```

---

## PHASE 3: TEMPLATES (Tasks 21-30)

### Task 21: Classic Template Implementation

```
Implement the Classic resume template.

Create file: src/components/Templates/ClassicTemplate.tsx

Requirements:
- Traditional chronological format
- Single-column layout
- Header:
  - Centered name (large, bold)
  - Contact info below name
  - Simple line separator
- Sections:
  - Professional Summary
  - Work Experience (chronological)
  - Education
  - Skills
  - Certifications
- Conservative styling:
  - Serif font (Times New Roman default)
  - Black text on white
  - Minimal borders
  - Traditional bullet points

ATS Optimization:
- Plain text only
- No graphics or tables
- Standard section headers
- Simple formatting

Deliverables:
- Complete Classic template
- Fully ATS compliant
- Uses template data correctly
- Print-optimized
```

---

### Task 22: Modern Template Implementation

```
Implement the Modern resume template.

Create file: src/components/Templates/ModernTemplate.tsx

Requirements:
- Clean, contemporary design
- Single-column layout with visual accents
- Header:
  - Left-aligned name (bold, large)
  - Contact info in compact format
  - Accent color bar
- Sections:
  - Summary with subtle emphasis
  - Experience with company emphasis
  - Projects highlighted
  - Skills in grid format
  - Education compact
- Modern styling:
  - Sans-serif font (Arial/Helvetica)
  - Accent colors used sparingly
  - Subtle borders and spacing
  - Contemporary bullet styles

Features:
- Clean visual hierarchy
- Good use of whitespace
- Professional but modern feel
- Still ATS-compliant

Deliverables:
- Complete Modern template
- ATS compliant
- Visually appealing
- Print-optimized
```

---

### Task 23: Minimal Template Implementation

```
Implement the Minimal resume template.

Create file: src/components/Templates/MinimalTemplate.tsx

Requirements:
- Ultra-clean, space-efficient design
- Maximizes content while maintaining readability
- Header:
  - Name and title in single line
  - Contact info ultra-compact
  - No decorative elements
- Sections:
  - Minimal spacing
  - No icons or graphics
  - Dense information layout
  - Compact bullet points
- Minimal styling:
  - Simple sans-serif font
  - Black and white only
  - No borders
  - Maximum information per page

Features:
- Fits maximum content on single page
- Ultra-clean aesthetic
- Perfect for experienced candidates
- 100% ATS safe

Deliverables:
- Complete Minimal template
- Space-optimized layout
- ATS compliant
- Print-optimized
```

---

### Task 24: Abhiram Template Implementation

```
Implement the Abhiram template based on the provided resume.html file.

Create file: src/components/Templates/AbhiramTemplate.tsx

Requirements (from provided HTML):
- Professional backend engineer focused design
- Header:
  - Centered name (22pt, bold, #2c3e50)
  - Role/title below (12pt, #555)
  - Contact info (9pt) with linked items
  - Bottom border (2px solid #2c3e50)
- Section headers:
  - Uppercase, bold (12pt)
  - #2c3e50 color
  - Bottom border (1.5px)
  - Letter spacing (0.5px)
- Professional Summary:
  - Justified text
  - Line height 1.35
- Technical Skills:
  - Category-based layout (Languages, Databases, etc.)
  - Bold category labels (#2c3e50, font-weight: 600)
  - Inline comma-separated skills
- Experience/Projects:
  - Bold job/project titles (10.5pt, #2c3e50)
  - Italic company/tech stack (#555)
  - Right-aligned dates (9pt, #666)
  - Bullet points with proper spacing
- Education:
  - Flexbox layout with date on right
  - Coursework section (9.5pt, #555)
- Certifications:
  - Bold cert names (#2c3e50, font-weight: 600)
  - Institution and dates inline
- Color scheme:
  - Primary: #2c3e50
  - Secondary: #555
  - Text: #333
  - Links: #2c3e50

Deliverables:
- Pixel-perfect implementation of provided design
- All styling from HTML preserved
- ATS compliant
- Print-ready
```

**Subtasks:**

- 24.1: Implement header and contact info section
- 24.2: Create section header component with styling
- 24.3: Implement experience and projects layouts
- 24.4: Add skills grid and remaining sections

---

### Task 25: Template Selector Component

```
Create the template selector in header.

Update file: src/components/Layout/Header.tsx

Requirements:
- Dropdown showing all 4 templates
- Template previews (thumbnails)
- Template details:
  - Name
  - Description
  - ATS score
  - Best for (use case)
- Switch template on selection
- Preserve all resume data during switch
- Confirmation dialog if major changes

Features:
- Visual template previews
- Search/filter templates
- Recently used templates
- Template comparison view

Styling:
- Modal or dropdown interface
- Large template previews
- Clear selection state
- Smooth transitions

Deliverables:
- Working template selector
- All 4 templates accessible
- Data preserved on switch
- Smooth template transitions
```

---

### Task 26: Template-Specific Styling System

```
Implement system for applying template-specific styles while maintaining customization.

Create file: src/utils/templateStyler.ts

Requirements:
- Merge template defaults with user customizations
- Apply template-specific:
  - Font families
  - Color schemes
  - Spacing rules
  - Section layouts
- Preserve user overrides
- Handle template switching gracefully

Create file: src/hooks/useTemplateStyles.ts
- Hook that returns computed styles
- Merges template + layout settings
- Memoized for performance
- Type-safe style objects

Logic:
1. Load template defaults
2. Apply user layout settings
3. Merge with user customizations
4. Return final style object

Deliverables:
- Template styling utility
- useTemplateStyles hook
- Proper style merging
- No style conflicts
```

---

### Task 27: Template Customization Options

```
Add template-specific customization options to layout controls.

Update file: src/components/Layout/LayoutControls.tsx

Requirements:
- Show customizable options for current template
- Different options per template:
  - Classic: Serif/Sans-serif toggle, spacing
  - Modern: Accent color, header style
  - Minimal: Density level
  - Abhiram: Color scheme variants
- Visual preview of changes
- Reset to template defaults
- Save as custom preset

Features:
- Conditional rendering based on template
- Live preview
- Preset variations
- Custom template export

Deliverables:
- Working customization options
- Template-specific controls
- Preview updates in real-time
- Save/load custom presets
```

---

### Task 28: Template Preview Thumbnails

```
Create thumbnail preview images for all templates.

Create file: src/components/Templates/TemplateThumbnail.tsx

Requirements:
- Generate or create static thumbnails for each template
- Display in template selector
- Show template name and description
- Indicate current template
- Hover effects with larger preview

Options:
1. Use html-to-image library to generate thumbnails
2. Create static SVG thumbnails
3. Take screenshots and use as images

Features:
- Lazy load thumbnails
- Responsive sizing
- Accessibility labels
- Quick preview on hover

Deliverables:
- Thumbnails for all 4 templates
- TemplateThumbnail component
- Integrated into selector
- Performance optimized
```

---

### Task 29: Template Validation System

```
Implement template validation to ensure ATS compliance.

Create file: src/utils/templateValidator.ts

Requirements:
- Validate template structure against ATS rules
- Check for:
  - Proper heading hierarchy
  - Standard section names
  - No tables or complex layouts
  - Font compatibility
  - Color contrast
  - Text selectability
- Return validation report
- Calculate ATS score (0-100)

Rules to validate:
- Section headers are standard
- Fonts are ATS-safe
- No images in content
- Proper date formats
- Bullet points are simple
- Contact info is parseable
- No text boxes or columns

Deliverables:
- Template validation utility
- ATS score calculator
- Detailed validation report
- Integration with templates
```

---

### Task 30: Template Import/Export

```
Implement template import/export functionality.

Create file: src/utils/templateImporter.ts

Requirements:
- Export template as JSON:
  - Template structure
  - Default styles
  - Layout configuration
  - Sample content
- Import custom template:
  - Validate structure
  - Parse configuration
  - Apply to resume
  - Add to template list

Create file: src/components/Layout/TemplateImportExport.tsx
- UI for import/export
- File upload for import
- Download JSON for export
- Template sharing capability

Features:
- Validate imported templates
- Preview before applying
- Share templates via JSON
- Community templates (future)

Deliverables:
- Template export functionality
- Template import with validation
- UI for import/export
- JSON schema validation
```

---

## PHASE 4: ADVANCED FEATURES (Tasks 31-40)

### Task 31: Drag-and-Drop Section Reordering

```
Implement drag-and-drop functionality for reordering sections.

Install: @dnd-kit/core @dnd-kit/sortable

Create file: src/components/Editor/DraggableSection.tsx

Requirements:
- Wrap section editors in draggable containers
- Visual feedback during drag:
  - Drag handle visible
  - Drop zones highlighted
  - Ghost/preview of dragging item
- Update section order in context
- Animate reordering
- Touch support for mobile

Features:
- Smooth animations
- Keyboard accessibility (arrow keys)
- Cancel drag with Escape
- Undo reorder functionality

Integration:
- Works with SectionManager
- Updates preview immediately
- Maintains section state during drag

Deliverables:
- Working drag-and-drop
- Visual feedback
- Touch support
- Accessible controls
```

---

### Task 32: ATS Validation Engine

```
Create comprehensive ATS validation system.

Create file: src/utils/atsValidator.ts

Requirements:
- Analyze resume content for ATS compliance
- Check multiple criteria:
  - Font compatibility (safe fonts only)
  - Section header standardization
  - Date format consistency
  - Contact info parseability
  - Keyword density (for job descriptions)
  - File structure (no tables/columns)
  - Text selectability
  - Length (1-2 pages ideal)
  - Bullet point formatting
  - Special characters usage
- Calculate score (0-100)
- Provide specific recommendations
- Categorize issues (critical, warning, info)

Create file: src/components/Editor/ATSScorePanel.tsx
- Display ATS score prominently
- Show issue breakdown
- List recommendations
- Real-time updates
- Click to fix issues

Deliverables:
- Complete ATS validation
- Scoring algorithm
- Issue detection
- Recommendations panel
```

**Subtasks:**

- 32.1: Implement validation rules
- 32.2: Create scoring algorithm
- 32.3: Build ATSScorePanel UI
- 32.4: Add real-time validation

---

### Task 33: Keyword Optimization Tool

```
Create keyword optimization tool to help with ATS keyword matching.

Create file: src/components/Editor/KeywordOptimizer.tsx

Requirements:
- Analyze resume for industry keywords
- Suggest relevant keywords:
  - By job role (Frontend, Backend, Full Stack, DevOps, etc.)
  - By skill category
  - By experience level
- Keyword density analysis
- Highlight missing important keywords
- Compare against job description (paste feature)
- Natural keyword integration suggestions

Features:
- Job description parser
- Keyword extraction
- Match percentage
- Integration suggestions
- Avoid keyword stuffing

UI:
- Collapsible panel
- Keyword list with checkboxes
- Density indicators
- Integration tips

Deliverables:
- Keyword analysis engine
- Suggestion system
- Job description comparison
- Integration helper
```

---

### Task 34: PDF Export Implementation

```
Implement high-quality PDF export using react-to-print.

Create file: src/hooks/usePDFExport.ts

Requirements:
- Use react-to-print library
- Generate PDF from preview component
- Maintain exact layout fidelity
- File naming: [Name]_Resume_[Date].pdf
- Handle multi-page resumes
- Print-specific CSS optimization
- Loading state during generation

Features:
- Preview before download
- Choose paper size (Letter, A4)
- Orientation (Portrait only)
- Quality settings
- Browser print dialog
- Direct PDF download

Update file: src/components/Layout/Header.tsx
- Export PDF button
- Export options modal
- File name customization
- Quality settings

Deliverables:
- Working PDF export
- High-quality output
- Exact WYSIWYG rendering
- Cross-browser support
```

**Subtasks:**

- 34.1: Set up react-to-print integration
- 34.2: Configure print styles
- 34.3: Create export controls UI
- 34.4: Test PDF output quality

---

### Task 35: JSON Export/Import

```
Implement resume data export and import as JSON.

Create file: src/utils/jsonExporter.ts

Requirements:
- Export resume data as JSON:
  - Complete resume structure
  - Layout settings
  - Template configuration
  - Metadata (version, timestamp)
- Validate JSON structure
- Import from JSON file:
  - Parse and validate
  - Check version compatibility
  - Migrate old versions
  - Apply to current resume
- Handle errors gracefully

Create file: src/components/Layout/DataManagement.tsx
- Export JSON button
- Import JSON file upload
- Clear/reset resume
- Version history (future)

Features:
- JSON schema validation
- Pretty-print JSON
- Compression option
- Encryption option (future)
- Cloud backup (future)

Deliverables:
- JSON export working
- JSON import with validation
- Error handling
- UI for data management
```

---

### Task 36: Resume Versioning with IndexedDB

```
Implement resume version management using IndexedDB.

Create file: src/utils/indexedDBManager.ts

Requirements:
- Save named resume versions to IndexedDB
- List all saved versions
- Load specific version
- Delete versions
- Export version as JSON
- Version metadata:
  - Version name
  - Created date
  - Modified date
  - Template used
  - Preview thumbnail

Create file: src/components/Editor/VersionManager.tsx
- List all saved versions
- Save current as new version
- Load version (with confirmation)
- Delete version (with confirmation)
- Compare versions
- Rename version

Features:
- Auto-version on major changes
- Version diffing
- Restore to version
- Export version history

Deliverables:
- IndexedDB storage working
- Version CRUD operations
- Version manager UI
- Preview thumbnails
```

**Subtasks:**

- 36.1: Set up IndexedDB with localforage
- 36.2: Implement save/load operations
- 36.3: Create version manager UI
- 36.4: Add version comparison

---

### Task 37: Undo/Redo Functionality

```
Implement undo/redo for resume editing.

Create file: src/hooks/useUndoRedo.ts

Requirements:
- Track state history (last 50 changes)
- Undo: Ctrl+Z (Cmd+Z on Mac)
- Redo: Ctrl+Shift+Z (Cmd+Shift+Z on Mac)
- Maintain history stack
- Clear history on template switch
- Update UI indicators (undo/redo availability)

Implementation:
- Store state snapshots
- Track current position in history
- Dispatch special actions for undo/redo
- Don't track every keystroke (debounce)

Create UI indicators in Header:
- Undo button (disabled when no history)
- Redo button (disabled when at end)
- Keyboard shortcut hints

Deliverables:
- Working undo/redo
- Keyboard shortcuts
- UI buttons with state
- History management
```

---

### Task 38: Browser-Based Research Integration

```
Set up foundation for using MCP server with browser for research.

Create file: src/hooks/useBrowserResearch.ts

Requirements:
- Foundation for browser-based research using MCP server
- Research ATS best practices
- Look up resume examples
- Check online ATS validators
- Compare with successful resume formats

Features:
- Access to web browser via MCP
- Research current best practices
- Test resume parsing
- Validate against online tools

Note: This uses MCP server integration for accessing browser

Deliverables:
- MCP browser integration setup
- Research helper functions
- ATS validation with online tools
- Best practices lookup
```

---

### Task 39: Print Optimization and Page Breaks

```
Optimize print output and handle page breaks intelligently.

Create file: src/utils/printOptimizer.ts

Requirements:
- Intelligent page break handling:
  - Avoid breaking sections in middle
  - Keep entries together (experience, projects)
  - Maintain proper spacing across pages
- Print-specific CSS:
  - Remove interactive elements
  - Optimize for black & white printing
  - Enhance text clarity
  - Proper margins for binding
- Multi-page support:
  - Page numbers
  - Header/footer on subsequent pages
  - Continuation indicators

Features:
- Auto-adjust to fit content
- Page break preview mode
- Manual page break insertion
- Orphan/widow control
- Print preview before export

Deliverables:
- Smart page break algorithm
- Print-optimized CSS
- Multi-page support
- Print preview mode
```

---

### Task 40: Responsive Design and Mobile Support

```
Implement responsive design for mobile and tablet devices.

Update all components for responsiveness.

Requirements:
- Mobile layout (< 768px):
  - Stack panels vertically
  - Collapsible sidebars
  - Bottom sheet for controls
  - Full-width preview
  - Touch-friendly controls
- Tablet layout (768px - 1024px):
  - Two-column layout
  - Drawer for editor panels
  - Larger touch targets
- Mobile-specific features:
  - Swipe gestures
  - Touch-optimized forms
  - Mobile PDF preview
  - Share via mobile apps

Update components:
- EditorLayout: Responsive grid
- Sidebar: Drawer on mobile
- Preview: Full-width scaling
- Controls: Bottom sheet
- Forms: Touch-friendly inputs

Deliverables:
- Fully responsive layout
- Mobile-optimized UI
- Touch gesture support
- Cross-device testing
```

**Subtasks:**

- 40.1: Update layout for mobile breakpoints
- 40.2: Convert sidebars to drawers
- 40.3: Optimize forms for touch
- 40.4: Test on multiple devices

---

## PHASE 5: EXPORT & POLISH (Tasks 41-50)

### Task 41: Email Resume Functionality

```
Add ability to prepare resume for email.

Create file: src/components/Editor/EmailResume.tsx

Requirements:
- Email preparation dialog with:
  - Subject: Pre-filled with resume title
  - Message: Custom message templates
  - Attach PDF: Prepare for attachment
- Generate mailto link
- Email templates:
  - Job application
  - Networking
  - Follow-up
- Copy email content

Features:
- Email validation
- Template selection
- PDF attachment preparation
- Copy to clipboard
- Open default email client

Note: Browser limitations - actual attachment requires backend

Deliverables:
- Email preparation dialog UI
- Template system
- mailto link generation
- Copy to clipboard function
```

---

### Task 42: Resume Analytics Dashboard

```
Create analytics dashboard showing resume metrics.

Create file: src/components/Analytics/AnalyticsDashboard.tsx

Requirements:
- Track metrics:
  - Resume completion percentage
  - ATS score over time
  - Section utilization
  - Export count
  - Edit time tracking
  - Keyword coverage
- Visual charts:
  - ATS score trend
  - Section completeness
  - Time spent per section
- Recommendations:
  - Incomplete sections
  - ATS improvements
  - Content suggestions

Features:
- Historical data tracking
- Export analytics report
- Compare versions
- Goal setting (target ATS score)

Note: Use localStorage for analytics data

Deliverables:
- Analytics dashboard
- Data collection system
- Visualizations (charts)
- Recommendations engine
```

---

### Task 43: Resume Templates Gallery

```
Create a gallery for browsing resume templates.

Create file: src/components/Gallery/TemplateGallery.tsx

Requirements:
- Display all available templates
- Template details:
  - Large preview
  - Description
  - Best for (roles/industries)
  - ATS score
  - Customization level
  - Sample resumes
- Filter templates:
  - By industry
  - By experience level
  - By ATS score
  - By customizability
- Search templates
- Preview with user's data

Features:
- Grid/list view toggle
- Favorite templates
- Recently used
- Import custom templates
- Share templates

Deliverables:
- Template gallery UI
- Filtering system
- Preview with data
- Template details pages
```

---

### Task 44: Content Suggestions System

```
Create content suggestion system for resume improvement.

Create file: src/utils/contentSuggestions.ts

Requirements:
- Generate suggestions for:
  - Professional summary
  - Job responsibilities (based on title)
  - Project descriptions
  - Skill recommendations
  - Achievement quantification
- Improve existing content:
  - Make more impactful
  - Add metrics
  - Action verb optimization
  - ATS keyword integration

Create file: src/components/Editor/ContentSuggestions.tsx
- Suggestion panel per section
- Generate button
- Multiple suggestion variants
- Apply/reject suggestions
- Edit before applying

Features:
- Context-aware suggestions
- Industry-specific content
- Experience level adjustment
- Tone customization

Note: Can integrate AI APIs in future

Deliverables:
- Content suggestion engine
- UI for suggestions
- Suggestion templates
- Content improvement helpers
```

---

### Task 45: Help and Tips System

```
Create comprehensive help and tips system.

Create file: src/components/Help/HelpPanel.tsx

Requirements:
- Contextual help tooltips
- Section-specific tips
- ATS best practices guide
- Common mistakes to avoid
- Resume writing guidelines
- Example content

Features:
- Help icon in header
- Inline tips in editors
- Expandable help sections
- Video tutorials (future)
- FAQ section
- Search help articles

Create file: src/constants/helpContent.ts
- ATS guidelines
- Writing tips per section
- Best practices
- Common questions

Deliverables:
- Help panel component
- Contextual tooltips
- Tips integrated in editors
- Comprehensive help content
```

---

### Task 46: Quick Start Tutorial

```
Create interactive quick start tutorial for new users.

Create file: src/components/Tutorial/QuickStartTutorial.tsx

Requirements:
- Step-by-step walkthrough:
  1. Choose a template
  2. Fill personal info
  3. Add work experience
  4. Customize layout
  5. Export PDF
- Highlight relevant UI elements
- Interactive steps
- Skip/complete tutorial
- Replay option

Features:
- Overlay with highlights
- Step indicators
- Skip for now option
- Don't show again checkbox
- Tutorial progress tracking

Deliverables:
- Tutorial component
- Step-by-step guide
- Interactive overlays
- Progress tracking
```

---

### Task 47: Resume Comparison Tool

```
Create tool to compare multiple resume versions.

Create file: src/components/Comparison/ResumeComparison.tsx

Requirements:
- Select 2+ resume versions
- Side-by-side comparison view
- Highlight differences:
  - Added content (green)
  - Removed content (red)
  - Modified content (yellow)
  - Layout changes
- Compare:
  - Content
  - ATS scores
  - Layout settings
  - Template used

Features:
- Diff algorithm for text
- Visual diff for layout
- Score comparison
- Export comparison report
- Revert to previous version

Deliverables:
- Comparison UI
- Diff algorithm
- Visual indicators
- Version selection
```

---

### Task 48: Accessibility Improvements

```
Enhance application accessibility (WCAG 2.1 AA compliance).

Requirements:
- Keyboard navigation:
  - Tab through all controls
  - Focus indicators visible
  - Keyboard shortcuts documented
  - Skip links
- Screen reader support:
  - ARIA labels on all interactive elements
  - ARIA live regions for updates
  - Proper heading hierarchy
  - Alt text for images
- Visual accessibility:
  - High contrast mode
  - Focus indicators
  - Color blind friendly colors
  - Resizable text (zoom support)
- Semantic HTML:
  - Proper element usage
  - Form labels
  - Button vs link usage

Testing:
- Test with screen readers (NVDA, JAWS)
- Keyboard-only navigation
- Color contrast validation
- Automated accessibility testing

Deliverables:
- Full keyboard navigation
- Screen reader compatibility
- High contrast mode
- WCAG 2.1 AA compliance
```

---

### Task 49: Performance Optimization

```
Optimize application performance.

Tasks:
1. **Code Splitting**:
   - Lazy load templates
   - Lazy load editor components
   - Route-based splitting

2. **React Optimization**:
   - Memoize expensive components
   - useCallback for event handlers
   - useMemo for derived state
   - React.memo for pure components
   - Virtual scrolling for long lists

3. **Bundle Optimization**:
   - Tree shaking
   - Minimize bundle size
   - Remove unused dependencies
   - Optimize images
   - Use CDN for libraries

4. **Rendering Optimization**:
   - Debounce preview updates
   - Throttle scroll handlers
   - Optimize re-renders
   - Use production builds

5. **Storage Optimization**:
   - Compress stored data
   - Limit history size
   - Clean old versions
   - Efficient serialization

Testing:
- Lighthouse audit (score > 90)
- Bundle size < 500KB
- First contentful paint < 1.5s
- Time to interactive < 3s

Deliverables:
- Optimized bundle
- Fast initial load
- Smooth interactions
- Performance metrics
```

---

### Task 50: Error Handling and Recovery

```
Implement comprehensive error handling and recovery.

Create file: src/components/ErrorBoundary.tsx

Requirements:
- React Error Boundary:
  - Catch component errors
  - Display fallback UI
  - Log errors
  - Recovery options
- Network error handling:
  - Detect offline status
  - Queue operations
  - Retry logic
  - User feedback
- Storage error handling:
  - Quota exceeded
  - Corrupted data
  - Migration errors
  - Backup recovery
- User input validation:
  - Form validation
  - File upload validation
  - Data format validation
  - Helpful error messages

Features:
- Error logging (console)
- User-friendly error messages
- Recovery suggestions
- Data backup on errors

Create file: src/utils/errorHandler.ts
- Centralized error handling
- Error classification
- Recovery strategies
- User notifications

Deliverables:
- Error boundaries
- Error handling utilities
- User-friendly error UI
- Recovery mechanisms
```

---

## PHASE 6: TESTING & OPTIMIZATION (Tasks 51-55)

### Task 51: ATS Testing with Real Systems

```
Test generated resumes with actual ATS systems and online checkers.

Testing Tools:
- Jobscan.co
- Resume Worded
- TopResume ATS checker
- Indeed Resume Scanner

Test each template:
1. **Classic Template**:
   - Upload to all ATS checkers
   - Record parse rate
   - Document issues
   - Fix identified problems

2. **Modern Template**:
   - Same testing process
   - Compare with Classic
   - Adjust as needed

3. **Minimal Template**:
   - Verify space optimization doesn't hurt parsing
   - Test readability

4. **Abhiram Template**:
   - Ensure backend engineer format parses well
   - Test tech skills section

Requirements:
- Parse rate > 95% on all checkers
- All sections recognized correctly
- Contact info extracted properly
- Dates parsed correctly
- Skills categorized correctly

Document:
- Test results per template
- Issues found
- Fixes applied
- Best practices confirmed

Note: Use MCP server with browser access to test with online ATS checkers

Deliverables:
- Test report for each template
- ATS compatibility confirmation
- List of validated features
- Improvement recommendations
```

---

### Task 52: Cross-Browser Testing

```
Test application across all major browsers.

Browsers to test:
- Chrome (latest)
- Firefox (latest)
- Safari (latest)
- Edge (latest)
- Mobile Safari (iOS)
- Chrome Mobile (Android)

Test areas:
1. **Layout**:
   - Three-panel design
   - Responsive breakpoints
   - Preview rendering
   - Print layout

2. **Functionality**:
   - Form inputs
   - Drag-and-drop
   - PDF export
   - Local storage
   - IndexedDB

3. **Performance**:
   - Load time
   - Rendering speed
   - Memory usage
   - CPU usage

4. **PDF Export**:
   - Quality across browsers
   - Layout fidelity
   - Text selectability
   - File size

Create compatibility matrix:
- Feature vs Browser
- Mark supported/unsupported
- Document workarounds
- Note known issues

Deliverables:
- Compatibility report
- Bug fixes for browser issues
- Polyfills if needed
- Browser support documentation
```

---

### Task 53: User Testing and Feedback

```
Conduct user testing with software engineers.

Test Plan:
1. **Recruit testers**:
   - Junior developers (0-2 years)
   - Mid-level (3-5 years)
   - Senior (5+ years)
   - Different specializations

2. **Testing scenarios**:
   - Create resume from scratch
   - Import existing resume data
   - Customize template
   - Export PDF
   - Use mobile version

3. **Collect feedback**:
   - Usability issues
   - Confusing features
   - Missing features
   - Design preferences
   - Performance concerns

4. **Metrics to track**:
   - Time to complete resume
   - Number of errors
   - Task completion rate
   - Satisfaction score (1-10)
   - Would recommend? (Yes/No)

Questions to ask:
- Was the interface intuitive?
- Did the templates meet your needs?
- Was the ATS guidance helpful?
- Would you use this for your resume?
- What features are missing?
- What would you improve?

Deliverables:
- User testing report
- Feedback compilation
- Priority improvements list
- UX enhancement plan
```

---

### Task 54: Documentation and Help System

```
Create comprehensive documentation.

Create files:
1. **README.md**:
   - Project description
   - Features list
   - Setup instructions
   - Build commands
   - Deployment guide
   - Contributing guidelines

2. **USER_GUIDE.md**:
   - Getting started
   - Creating your first resume
   - Customization guide
   - Template selection
   - ATS optimization tips
   - Export options
   - Troubleshooting

3. **DEVELOPER_GUIDE.md**:
   - Architecture overview
   - Code structure
   - Component hierarchy
   - State management
   - Adding new templates
   - Extending functionality
   - Testing guide

4. **ATS_BEST_PRACTICES.md**:
   - ATS compliance guidelines
   - Formatting rules
   - Content recommendations
   - Common mistakes
   - Industry-specific tips

Features:
- Clear documentation structure
- Code examples
- Screenshots
- Video tutorials (future)
- FAQ section

Deliverables:
- Complete documentation
- User guide
- Developer guide
- ATS best practices guide
```

---

### Task 55: Final Polish and Launch Prep

```
Final polish and prepare for launch.

Tasks:

1. **UI/UX Polish**:
   - Smooth all animations
   - Consistent spacing
   - Professional color scheme
   - Loading states
   - Empty states
   - Success/error messages
   - Micro-interactions

2. **Code Cleanup**:
   - Remove console.logs
   - Remove unused imports
   - Remove commented code
   - Consistent formatting
   - Add missing comments
   - Update dependencies

3. **Performance Final Check**:
   - Lighthouse audit
   - Bundle size analysis
   - Memory leak check
   - Load time optimization

4. **Security Review**:
   - Input sanitization
   - XSS prevention
   - localStorage security
   - Dependency vulnerabilities

5. **Build Optimization**:
   - Production build
   - Asset optimization
   - Gzip compression
   - Caching strategy

6. **Launch Checklist**:
   - [ ] All features working
   - [ ] Cross-browser tested
   - [ ] Mobile responsive
   - [ ] ATS compliance verified
   - [ ] Documentation complete
   - [ ] Performance optimized
   - [ ] Security reviewed
   - [ ] Error handling robust
   - [ ] Analytics integrated (basic)
   - [ ] Backup system working

7. **Deployment**:
   - Choose hosting (Vercel, Netlify, etc.)
   - Set up CI/CD (optional)
   - Configure domain (if available)
   - SSL certificate
   - Environment variables
   - Monitoring setup (basic)

Deliverables:
- Production-ready application
- Deployment pipeline (basic)
- Launch checklist completed
- Basic monitoring
- Backup strategy
```

---

## SUMMARY

**Total Tasks: 55**

**Phase Breakdown:**

- Phase 1 (Foundation): Tasks 1-10 - Project setup, types, basic components
- Phase 2 (Editor Core): Tasks 11-20 - All section editors and layout controls
- Phase 3 (Templates): Tasks 21-30 - All 4 templates and template system
- Phase 4 (Advanced Features): Tasks 31-40 - Advanced functionality and optimizations
- Phase 5 (Export & Polish): Tasks 41-50 - Export features and UI polish
- Phase 6 (Testing & Launch): Tasks 51-55 - Testing, docs, and launch preparation

**Template Priority:**

1. Abhiram Template (Task 24) - Based on provided resume.html
2. Classic Template (Task 21) - Traditional format
3. Modern Template (Task 22) - Contemporary design
4. Minimal Template (Task 23) - Space-efficient

**Key Features:**

- ✅ All 4 templates including Abhiram template from provided HTML
- ✅ Highly customizable sections (margins, spacing, fonts, colors)
- ✅ ATS compliance validation
- ✅ PDF export with react-to-print
- ✅ Auto-save functionality
- ✅ Version management
- ✅ Undo/Redo
- ✅ MCP browser integration for research and testing
- ✅ Responsive design
- ✅ Comprehensive testing

**Development Approach:**

1. Complete tasks sequentially
2. Test after each task
3. Commit after completion
4. Use MCP server for browser-based research and ATS testing
5. Refer to .cursorrules and docs for guidelines
6. Break large tasks into subtasks if needed

**Success Criteria:**

- ATS parse rate > 95% on all templates
- PDF matches preview exactly
- All sections fully customizable
- Mobile responsive
- Fast performance (Lighthouse > 90)
- Cross-browser compatible
- Production-ready code quality

---

## USAGE NOTES

**For Cursor Agent:**

1. Copy each task prompt exactly as written
2. Complete in sequential order
3. Test thoroughly before moving to next task
4. Refer to docs when needed
5. Use MCP browser for research and testing
6. Follow .cursorrules guidelines

**For Developer:**

1. Review task before starting
2. Check dependencies on previous tasks
3. Test functionality after completion
4. Commit with descriptive message
5. Update progress in this document
6. Document any deviations or issues

**MCP Server Integration:**

- Use browser access for ATS research
- Test with online ATS validators
- Look up best practices
- Compare with successful resumes
- Validate PDF output

---

**Ready to Begin!**

Start with Task 1: Project Initialization and Setup
